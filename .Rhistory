lines(v=mean(airquality$Wind),lty=2,lwd=2)
abline(v=mean(airquality$Wind),lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Wind, airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1),oma=c(0,0,2,00))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Wind, airquality$Solar.R,main="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
quit()
q()
q()
plot(rnorm(100),type="l",col=2)
lines(rnorm(100))
q()
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data=airquality)
airquality <- transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
quit()
library(lattice)
library(datasets)
head(airquality)
head(airquality,20)
airquality <- transform(airquality, Month=factor(Month))
head(airquality,20)
quit()
f <-"C:\\ramziPri\\R_workarea\\pattern_eds.csv"
df <- read.csv(f,nrows=1000)
head(df)
names(df)
df$clioxml[0]
cx <- df$clioxml
head(cx)
cx[0]
str(cx)
quit()
?aes
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
trellis.par.set()
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(qqplot2)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
installed.packages()
installed.packages()[,1]
str(installed.packages()[,1])
is.element("data.table", installed.packages()[,1])
getwd()
data <- read.table("household_power_consumption.txt",header = T, sep = ";",as.is=T,na.strings = "?")
# clean up dates and select only the range wanted
data$Date <- as.Date(data$Date,"%d/%m/%Y")
data <- data[data$Date == '2007-02-01' | data$Date == '2007-02-02',]
# create plot 1
png("plot1.png", width=480, height=480)
hist(data$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
head(data)
dev.off()
data <- read.table("household_power_consumption.txt",header = T, sep = ";",na.strings = "?")
data$Date <- as.Date(data$Date,"%d/%m/%Y")
data <- data[data$Date == '2007-02-01' | data$Date == '2007-02-02',]
hist(data$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
?read.table
swirl()
library(swirl)
rm(list=ls())
swirl()
head(airquality)
xyplot(Ozone ~ Wind , airquality)
xyplot(Ozone~Wind,airquality, col="red",pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month) , airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month , airquality, layout=c(5,1))
p <- xyplot(Ozone ~ Wind , airquality)
print (p)
names(p)
quit()
library(swirl)
rm(list=ls())
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran,package=="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comarison
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500
, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
quit
quit9)
quit()
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12,mean=rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,lables(as.character(1:12))
)
text(x+0.05,y+0.05,labels(as.character(1:12))
)
?plot
x
names(x)
rep(1:3,each=4)
mean=rep(1:3,each=4)
mean
?rnorm
mean(x)
mean(mean)
rep(c(1,2,1),each=4)
dataFrame <- data.frame(x=x,y=y)
dist(dataFrame)
hC <-hclust(dist(dataFrame))
plot(hC)
kmean(dataFrame,centers=3)
kmeans(dataFrame,centers=3)
q()
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), color = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton); library(ggplot2); library(reshape2)
longGalton <- melt(galton, measure.vars = c("child", "parent"))
g <- ggplot(longGalton, aes(x = value)) + geom_histogram(aes(y = ..density..,  f\
ill = variable), binwidth=1, color = "black") + geom_density(size = 2)
g <- g + facet_grid(. ~ variable)
g
install.packages("UsingR")
library(UsingR); data(galton); library(ggplot2); library(reshape2)
ongGalton <- melt(galton, measure.vars = c("child", "parent"))
g <- ggplot(longGalton, aes(x = value)) + geom_histogram(aes(y = ..density..,  f\
ill = variable), binwidth=1, color = "black") + geom_density(size = 2)
g <- g + facet_grid(. ~ variable)
longGalton <- melt(galton, measure.vars = c("child", "parent"))
g <- ggplot(longGalton, aes(x = value)) + geom_histogram(aes(y = ..density..,  fill = variable), binwidth=1, color = "black") + geom_density(size = 2)
g <- g + facet_grid(. ~ variable)
g
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), color = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
View(ongGalton)
var(rnorm(100))
var(rnorm(1000))
var(rnorm(10000))
var(rnorm(100000))
nosim <-1000
n <- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1/sqrt(n)
n <- 20
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1/sqrt(n)
var(sample(1:6),20,rep=T))
sample(1:6)
sample(1:6,rep=20)
?sample
sample(1:6,100,rep=T)
var(sample(1:6,100,rep=T))
var(sample(1:6,1000,rep=T))
var(sample(1:6,10000,rep=T))
var(sample(1:6,100000,rep=T))
mt <- matrix(rnorm(10*10),10)
mt
apply(mt1,1,mean)
apply(mt,1,mean)
sd(apply(mt,1,mean))
1/sqrt(n)
matrix(5,2)
matrix(c(1,2),1,2)
matrix(c(1,2),1)
matrix(c(1,2,3,4),1)
rnorm(100)
matrix(rnorm(10),5)
matrix(rnorm(10),5,4)
library(swirl())
swirl()
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smean)
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair - 3.5^2
sum(dice_sqr*dice_high)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
help()
info()
matrix(runif(100),10))
matrix(runif(100),10)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
mean(rnorm(1000))
rnorm(1000,1,0)
rnorm(1000,0,1)
mean(rnorm(1000,0,1))
sd(rnorm(1000,0,1))
q()
swirl()
libray(swirl())
library(swirl)
rm(list=ls())
swirl()
p <- seq(0,1,length=50)
p
nosim
nosim <- 100
n <- 10
mat <- matrix(rnorm(nosim*n),nosim)
mat
apply(mat,1,mean)
?apply
mean(mat[1])
mean(mat[2]
)
mean(mat[2])
mat[1]
mat[2]
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
dimnames(x)
dimnames(x)[1]
dimnames(x)[[1]]
letters[1:8]
dimnames(x)[[1]] <- letters[1:8]
x
apply(x,2,mean)
apply(x,1,mean)
mat
mean(mat[1,])
mean(mat[2,])
mmat <- apply(mat,1,mean)
mmat
sd(mmat)
1/sqrt(n)
nosim <-100000
n <-10
sd(apply(matrix(rnorm(nosim*n),nosim),1,mean))
n <-20
sd(apply(matrix(rnorm(nosim*n),nosim),1,mean))
1/sqrt(20)
n <-100
sd(apply(matrix(rnorm(nosim*n),nosim),1,mean))
exit()
q()
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
runif(40)
library(UsingR)
data(father.son)
x <- father.son$height
x
father.son
x<-father.son$sheight
x
mean(x)
mean(x)/12
m <- sd(x)/sqrt(length(x))
qnorm(0.975)
(mean(x) +c(1,-1)*qnorm(0.95)*m)/12
pnorm(70,80,sd=10)
?pnorm
pnorm(70,80,sd=10,lower.tail=FALSE)
1 - 0.1586553
qnorm(0.95,1100,75)
pnorm(95,1100,75)
qnorm(0.95,1100,75)
qnorm(0.95,1100,7.5)
pbinom(3,size=5,prob=0.5,lower.tail=FALSE)
pbinom(3,size=5,prob=0.5,lower.tail=FALSE)*100
pbinom(4,size=5,prob=0.5)
pbinom(5,size=5,prob=0.5)
pnorm(16, mean = 15, sd = 1) - pnorm(14, mean = 15, sd = 1)
(pnorm(16, mean = 15, sd = 1) - pnorm(14, mean = 15, sd = 1))*100
pnorm(16, mean = 15, sd = 1)
pnorm(15, mean = 15, sd = 1)
pnorm(14, mean = 15, sd = 1)
ppois(10, lambda = 5 * 3)
cumsum(rnorm(10))
c(1,2,3,4)
cumsum(c(1,2,3,4))
cumsum(1,2,3)
pnorm(2.2,2,0.7/50)
pnorm(2.02,2,0.7/50)
pnorm(2.02,2,0.7/sqrt(50)
)
pnorm(2.2,2,0.7/sqrt(50)
)
pnorm(2.2,2,0.7/sqrt(50),lower.tail=False)*100
pnorm(2.2,2,0.7/sqrt(50),lower.tail=FALSE)*100
110/50
nrom(100)
norm(100)
rnorm(100)
hist(rnorm(100))
pnorm(124,112.40/sqrt(36))*100
pnorm(124,112.40/sqrt(36))
pnorm(124,112,40/sqrt(36))
pnorm(124,112,40/sqrt(36)) - pnorm(100,112,40/sqrt(36))
40/6
0.9281394/2
0.495/0.5
sd = 0.5
mu = 0.568
qnorm(99,mu,sd)
mu
sd
qnorm(99,mu,sd/sqrt(250))
qnorm(0.99,mu,sd/sqrt(250))
qnorm(0.99,mu,sd)
qnorm(0.99,mu,sd/sqrt(250))
qnorm(0.98,mu,sd/sqrt(250))
sd
mu = 22
sd = 2.8
pnorm(24.8,mu,sd)
pnorm(19.2,mu,sd)
pnorm(24.8,mu,sd) - pnorm(19.2,mu,sd)
qnorm(71,65.08,4)
pnorm(71,65.08,4)
71-68.08
2.92/4
4/2.92
71-65.08
(71-65.08)/4
qt
t
t.test
data(sleep)
difference = sleep$extra[1:10] - sleep$extra[11:20]
difference
t.text(difference)
t.test(difference)
mean(difference) + c(-1,1) * qt(0.975,9)*sd(difference)/3
library(reshape2)
data(ChickWeight)
ChickWeight
head(ChickWeight)
wideCW = dcast(ChickWeight,Diet+Chick ~ Time,value.var="weight")
wideCW
?dcast
exit
quit()
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
set.seed(0)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
set.seed(1)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
set.seed(111)
rexp(100 * 2, rate=0.2)
set.seed(111)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
set.seed(234)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
set.seed(2)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
set.seed(1234)
rexp(100 * 2, rate=0.2)
rexp(100 * 2, rate=0.2)
q()
q()
install.packages("RGtk2")
q()
library(RGtk2)
install.packages("rattle")
install.packages("rpart.plot")
install.packages("randomForset")
install.packages("randomForest")
install.packages("repmis")
getcwd()
getwd()
setwd("C:\\ramziPri\\R_workarea\\practical_machine_learning")
train_data <- read.csv("pml-training.csv", na.strings = c("NA", ""))
test_data <- read.csv("pml-testing.csv", na.strings = c("NA", ""))
#show first 10 rows
head(train_data,5)
head(test_data,5)
str(train_data)
str(train_data).data.frame
len(train_data)
nrow(train_data)
c(nrow(train_data),ncol(train_data))
train_data$classe
dim(train_data)
View(test_data)
View(test_data)
colSums(is.na(train_data)) == 0
train_data$classe
train_data$classa
train_data$classb
View(test_data)
View(test_data)
View(train_data)
View(train_data)
clean_train_data <-  train_data[, colSums(is.na(train_data)) == 0]
View(clean_train_data)
View(clean_train_data)
clean_train_data$classe
trainData <- clean_tain_data[, -c(1:7)]
trainData <- clean_train_data[, -c(1:7)]
View(trainData)
View(trainData)
```{r echo=TRUE}
set.seed(1234)
trainTemp <- createDataPartition(clean_train_data$classe, p = 0.7, list = FALSE)
train_set <- clean_train_data[trainTemp,]
valid_set <- clean_train_data[-trainTemp,]
```{r echo=TRUE}
set.seed(1234)
trainTemp <- createDataPartition(clean_train_data$classe, p = 0.7, list = FALSE)
train_set <- clean_train_data[trainTemp,]
valid_set <- clean_train_data[-trainTemp,]
```{r}
clean_train_data <- train_data[, colSums(is.na(train_data)) == 0]
clean_test_data <- test_data[, colSums(is.na(test_data)) == 0]
clean_train_data <- clean_train_data[,-c(1:7)] #keep all columns except 1 to 7
clean_test_data <- clean_test_data[,-c(1:7)]
#print size of the data -number of rows- (observatition) and -number of column- variable after the clean up
dim(clean_train_data)
dim(clean_test_data)
set.seed(1234)
trainTemp <- createDataPartition(clean_train_data$classe, p = 0.7, list = FALSE)
train_set <- clean_train_data[trainTemp,]
valid_set <- clean_train_data[-trainTemp,]
library(ggplot2)
library(datasets)
library(caret)
library(rattle)
library(randomForest) #Breiman and Cutler's Random Forests for Classification and Regression
library(repmis) # Automatically generate BibTeX files
set.seed(1234)
trainTemp <- createDataPartition(clean_train_data$classe, p = 0.7, list = FALSE)
train_set <- clean_train_data[trainTemp,]
valid_set <- clean_train_data[-trainTemp,]
control <- trainControl(method = "cv", number = 5)
fit_rpart <- train_set(classe ~ ., data = train_set, method = "rpart",
trControl = control)
print(fit_rpart, digits = 4)
